---
version: "3"

vars:
  # renovate: datasource=github-releases depName=getsops/sops
  SOPS_VERSION: v3.8.1

includes:
  app: ./apps

tasks:
  default:
    silent: true
    cmd: go-task -l
  
  deps:
    desc: Install deps for system
    cmds:
      - sudo rpm-ostree install --idempotent --assumeyes age bind-utils direnv expect fastfetch fish fzf gh git go-task gron htop moreutils neovim net-tools netcat nmap rsync systemd-networkd tcpdump telnet tree wget yq zoxide
      - sudo rpm-ostree install --idempotent --assumeyes https://github.com/getsops/sops/releases/download/{{.SOPS_VERSION}}/sops-{{.SOPS_VERSION | replace "v" ""}}.x86_64.rpm
      - # Direnv
        |
        mkdir -p /home/$LOGNAME/.config/direnv && \
        tee /home/$LOGNAME/.config/direnv/direnv.toml > /dev/null <<EOF
        [whitelist]
        prefix = [ "/var/opt/home-service" ]
        EOF
    preconditions:
      - msg: must not be run as root
        sh: '[[ $LOGNAME != "root" ]]'

  start-*:
    desc: Start a container service
    cmds:
      - task: reload-{{.container}}
      - sudo systemctl start {{.container}}
      - sudo systemctl is-active --quiet {{.container}} || exit 1
      - sudo podman ps --all --filter name={{.container}} --format "{{ `{{.Names}} - {{.Image}} - {{.Status}}` }}"
    vars:
      container: '{{index .MATCH 0}}'

  restart-*:
    desc: Restart a container service
    cmds:
      - task: reload-{{.container}}
      - sudo systemctl restart {{.container}}
      - sudo systemctl is-active --quiet {{.container}} || exit 1
      - sudo podman ps --all --filter name={{.container}} --format "{{ `{{.Names}} - {{.Image}} - {{.Status}}` }}"
    vars:
      container: '{{index .MATCH 0}}'
    preconditions:
      - msg: container systemd service '{{.container}}' not found
        sh: systemctl status {{.container}}

  status-*:
    desc: Status of a container service
    cmd: sudo systemctl status {{.container}}
    vars:
      container: '{{index .MATCH 0}}'
    preconditions:
      - msg: container systemd service '{{.container}}' not found
        sh: systemctl status {{.container}}

  stop-*:
    desc: Stop a container service
    cmd: sudo systemctl stop {{.container}}
    vars:
      container: '{{index .MATCH 0}}'
    preconditions:
      - msg: container systemd service '{{.container}}' not found
        sh: systemctl status {{.container}}

  reload-*:
    desc: Reload a container service
    cmds:
      - sudo rsync -rv {{.ROOT_DIR}}/apps/{{.container}}/{{.container}}.container /etc/containers/systemd/
      - sudo rsync -rv --mkpath --delete {{.ROOT_DIR}}/apps/{{.container}}/data/{{- if eq .CLI_FORCE false }}config/{{ end }} /etc/containers/systemd/{{.container}}{{- if eq .CLI_FORCE false }}/config{{ end }}
      - sudo --preserve-env bash -c "find /etc/containers/systemd/{{.container}}/config -type f -name "*.sops.*" -print0 | xargs -0 -I {} sops --config {{.ROOT_DIR}}/.sops.yaml --decrypt --in-place {}"
      - sudo systemctl daemon-reload
    sources:
      - "{{.ROOT_DIR}}/apps/{{.container}}/{{.container}}.container"
      - "{{.ROOT_DIR}}/apps/{{.container}}/data/config/**/**"
    generates:
      - /etc/containers/systemd/{{.container}}.container
      - /etc/containers/systemd/{{.container}}/config/**/**
      - /run/systemd/generator/{{.container}}.service
    label: reload-{{.container}}
    preconditions:
      - msg: file 'apps/{{.container}}/{{.container}}.container' not found
        sh: test -f {{.ROOT_DIR}}/apps/{{.container}}/{{.container}}.container
      - msg: directory 'apps/{{.container}}/data' not found
        sh: test -d {{.ROOT_DIR}}/apps/{{.container}}/data
    vars:
      container: '{{index .MATCH 0}}'

  remove-*:
    desc: Remove a container service
    prompt: Remove the '{{.container}}' container ... continue?
    cmds:
      - task: stop-{{.container}}
      - sudo rm /etc/containers/systemd/{{.container}}.container
      - sudo rm -rf /etc/containers/systemd/{{.container}}
      - sudo rm -rf /run/systemd/generator/{{.container}}.service
      - sudo systemctl daemon-reload
    vars:
      container: '{{index .MATCH 0}}'

